{"version":3,"sources":["components/Header.jsx","context/AppReducer.js","context/GlobalState.js","components/IncomeExpenses.jsx","services/services.js","components/Transaction.jsx","components/ClearButton.jsx","components/TransactionList.jsx","constants/categories.js","components/AddTransaction.jsx","services/messages.js","components/Login.jsx","components/Logout.jsx","components/style/styles.js","services/useTransactions.js","components/Details.jsx","App.jsx","index.js","services/spinner.svg"],"names":["Header","className","state","action","type","transactions","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","updateTransactions","IncomeExpenses","useContext","Inamounts","filter","t","map","transaction","amount","Examounts","income","reduce","acc","item","toFixed","expense","total","convertNetworkError","err","console","log","code","convertServiceError","Promise","reject","Transaction","performDeleteTransaction","id","fetch","method","headers","Headers","body","JSON","stringify","catch","then","response","ok","json","removeTransaction","result","sign","category","text","Math","abs","date","onClick","ClearButton","clearTransactions","TransactionList","useEffect","ref","componentBackingInstance","Dragula","removeOnSpill","key","length","incomeColors","expenseColors","incomeCategories","color","expenseCategories","AddTransaction","useState","setCategory","setAmount","setType","setDate","setText","selectedCategories","htmlFor","onChange","e","target","c","preventDefault","messages","DEFAULT","USERNAME_REQUIRED","NETWORK_ERROR","LOGIN_REQUIRED","LOGIN_UNAUTHORIZED","BAD_USERNAME","Login","onLogIn","username","setUsername","isLoading","setIsLoading","error","setError","placeholder","alt","src","spinner","fetchLogin","userInfo","Logout","onLogout","makeStyles","borderBottom","useTransactions","title","forEach","rightTransactions","currVal","categories","find","filteredCategories","sc","chartData","datasets","data","backgroundColor","labels","DetailsCard","subheader","classes","useStyles","Card","CardHeader","CardContent","Typography","variant","App","isLoggedIn","setLoggedIn","setUserName","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ac8da1c1.chunk.js","sourcesContent":["import React from 'react'\nimport \"./style/style.css\";\n\n//This function is to provide a head\nexport const Header = () => {\n  return (\n    <h1 className=\"header\">\n      Expense Tracker\n    </h1>\n  )\n}\n","export default (state, action) => {\n  switch(action.type) {\n    case 'UPDATE_TRANSACTION':\n      return {\n        ...state,\n        transactions:action.payload\n      }\n    default:\n      return state;\n  }\n}","import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n//This is to provide a global context which makes update states globally\n// Initial state\nconst initialState = {\n  transactions: []\n}\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\nfunction updateTransactions(transactions){\n    dispatch({\n      type: 'UPDATE_TRANSACTION',\n      payload: transactions\n    })\n  }\n  return (\n    <GlobalContext.Provider value={{\n    transactions: state.transactions,\n    updateTransactions\n  }}>\n   {children}\n    \n  </GlobalContext.Provider>);\n}","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\n\n//This finction is to automatically compute the income,expense and balance\nexport const IncomeExpenses = () => {\n\n  //get the transactions\n const { transactions } = useContext(GlobalContext);\n\n //get the amount of each income\n const Inamounts = transactions.filter((t) => t.type == \"Income\").map(transaction => transaction.amount);\n \n //get the amount of each expense\n const Examounts = transactions.filter((t) => t.type == \"Expense\").map(transaction => transaction.amount);\n\n //compute the totole amount of income\n const income = Inamounts\n    .reduce((acc, item) => (acc += +item), 0).toFixed(2);\n\n//compute the totole amount of income\n const expense = Examounts\n    .reduce((acc, item) => (acc += +item), 0).toFixed(2);\n\n//compute the balance\n const total=(income-expense);\n\n\n\n  return (\n    \n    <div className=\"inc-exp-container\">\n   <div>\n      <h4>Your Balance</h4>\n      <h1>${total}</h1>\n    </div>\n      \n      <div>\n        <h4>Income</h4>\n        <p className=\"money plus\">{income}</p>\n      </div>\n      <div>\n        <h4>Expense</h4>\n        <p className=\"money minus\">{expense}</p>\n      </div>\n    </div>\n  );\n};\n","const convertNetworkError = err => {\n  console.log(\"fail\");\n  return {\n    code: \"NETWORK-ERROR\",\n    err\n  };\n};\n\nconst convertServiceError = err => Promise.reject(err);\nexport const fetchLoginStatus = username => {\n  return fetch(\"/session\", {\n    method: \"GET\"\n  })\n    .catch(convertNetworkError)\n    .then(response => {\n      if (!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n};\n\nexport const fetchLogin = username => {\n  return fetch(\"/session\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"content-type\": \"application/json\"\n    }),\n    body: JSON.stringify({ username })\n  })\n    .catch(convertNetworkError)\n    .then(response => {\n      if (!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n};\n\nexport const fetchLogout = () => {\n  return fetch(\"/session\", {\n    method: \"DELETE\"\n  })\n    .catch(convertNetworkError)\n    .then(response => {\n      return response.ok;\n    });\n};\n\nexport const fetchTransactionList = () => {\n  return fetch(\"/transactions\", {\n    method: \"GET\"\n  })\n    .catch(convertNetworkError)\n    .then(response => {\n      //when happens error\n      if (!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n};\n\nexport const removeTransaction = id => {\n  return fetch(\"/transaction\", {\n    method: \"DELETE\",\n    headers: new Headers({\n      \"content-type\": \"application/json\"\n    }),\n    body: JSON.stringify({ id })\n  })\n    .catch(convertNetworkError)\n    .then(response => {\n      if (!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n};\n\nexport const clearTransactions = () => {\n  return fetch(\"/cleartransactions\").then(response => {\n    if (!response.ok) {\n      return response.json().then(convertServiceError);\n    }\n    return response.json();\n  });\n};\n\nexport const addTransaction = transaction => {\n  return fetch(\"/transaction\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"content-type\": \"application/json\"\n    }),\n    body: JSON.stringify({ transaction })\n  })\n    .catch(convertNetworkError)\n    .then(response => response.json());\n};\n","import React, {useContext} from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport {removeTransaction} from '../services/services'\nimport \"./style/style.css\";\n\n//This function is to add new transaction to the history list and perform deleting a transaction\nexport const Transaction = ({ transaction }) => {\n  const { updateTransactions } = useContext(GlobalContext);\n  const performDeleteTransaction = (id)=>{ \n    removeTransaction(id).then((result) => {\n        updateTransactions(result)\n    }).catch((err) => {\n      console.log(\" delete error\")\n    });\n  }\n  const sign = transaction.type=== \"Income\"? '+' : '-';\n  return (\n  <li className={transaction.type ===\"Expense\" ? 'minus' : 'plus'}>\n      <span className=\"category\">{transaction.category}</span> <span className=\"text\">{transaction.text}</span> <span className=\"amount\">{sign}${Math.abs(transaction.amount)} <span className=\"date\">{transaction.date}</span></span>\n      <button onClick={()=>performDeleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\n   </li>\n  )\n}\n","import React from 'react';\nimport \"./style/style.css\";\n\n\n//This function is to provide a clear button \n//to clear all the transaction history\nexport const ClearButton = ({clearTransactions}) => {\n  return (\n    <>\n      <button  className=\"cleanbtn\" onClick={clearTransactions}>Clear Transactions </button>\n    </>\n    );\n}\n \n","import React, { useContext, useEffect } from 'react';\nimport { Transaction } from './Transaction.jsx';\nimport {fetchTransactionList} from '../services/services'\nimport { GlobalContext } from '../context/GlobalState';\nimport {ClearButton} from './ClearButton'\nimport {clearTransactions} from '../services/services'\nimport Dragula from 'react-dragula';\nimport \"./style/style.css\";\n\n//This function is to show the history of all the transactions\nexport const TransactionList = () => {\n  const { transactions, updateTransactions } = useContext(GlobalContext);\n  useEffect(()=>{\n    fetchTransactionList().then((result) => {\n      updateTransactions(result)\n    }).catch((err) => {\n      console.log(err)\n    });\n  },[])\n\n  //clear history\n  const removeTransactions = () =>{\n    clearTransactions().then(result=>{\n      updateTransactions(result)\n    }).catch(err => console.log(err))\n  }\n\n  //changing transaction's position by dragging it to new position\n  const dragulaDecorator = (componentBackingInstance) => {\n    if (componentBackingInstance) {\n      let options = {removeOnSpill: true };\n      Dragula([componentBackingInstance], options);\n    }\n  }\n  return (\n    <div className=\"history\"> <h3>History</h3>\n      <ul className=\"list\" ref={dragulaDecorator}>\n        {transactions.map(transaction => (<Transaction key={transaction.id} transaction={transaction} />))}\n      </ul>\n      <div className=\"clean\">\n      {transactions.length>0? <ClearButton  clearTransactions={removeTransactions}/>:null}</div>\n    </div>\n  )\n}\n","const incomeColors = ['#123123', '#154731', '#165f40', '#16784f', '#14915f', '#10ac6e', '#0bc77e', '#04e38d', '#00ff9d'];\nconst expenseColors = ['#b50d12', '#bf2f1f', '#c9452c', '#d3583a', '#dc6a48', '#e57c58', '#ee8d68', '#f79d79', '#ffae8a', '#cc474b', '#f55b5f'];\n\n//This is all the categories under the different type(income/expense)\n//Mapping different category to different color to optimize the plot view\nexport const incomeCategories = [\n  { type: 'Business', amount: 0, color: incomeColors[0] },\n  { type: 'Investments', amount: 0, color: incomeColors[1] },\n  { type: 'Extra income', amount: 0, color: incomeColors[2] },\n  { type: 'Deposits', amount: 0, color: incomeColors[3] },\n  { type: 'Lottery', amount: 0, color: incomeColors[4] },\n  { type: 'Gifts', amount: 0, color: incomeColors[5] },\n  { type: 'Salary', amount: 0, color: incomeColors[6] },\n  { type: 'Savings', amount: 0, color: incomeColors[7] },\n  { type: 'Rental income', amount: 0, color: incomeColors[8] },\n];\n\nexport const expenseCategories = [\n  { type: 'Bills', amount: 0, color: expenseColors[0] },\n  { type: 'Car', amount: 0, color: expenseColors[1] },\n  { type: 'Clothes', amount: 0, color: expenseColors[2] },\n  { type: 'Travel', amount: 0, color: expenseColors[3] },\n  { type: 'Food', amount: 0, color: expenseColors[4] },\n  { type: 'Shopping', amount: 0, color: expenseColors[5] },\n  { type: 'House', amount: 0, color: expenseColors[6] },\n  { type: 'Entertainment', amount: 0, color: expenseColors[7] },\n  { type: 'Phone', amount: 0, color: expenseColors[8] },\n  { type: 'Pets', amount: 0, color: expenseColors[9] },\n  { type: 'Other', amount: 0, color: expenseColors[10] },\n];\n\nexport const resetCategories = () => {\n  incomeCategories.forEach((c) => c.amount = 0);\n  expenseCategories.forEach((c) => c.amount = 0);\n};\n","import React, {useState, useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\nimport { addTransaction } from '../services/services';\nimport { incomeCategories, expenseCategories } from '../constants/categories.js';\nimport \"./style/style.css\";\n\n//This is the function to add transactions\nexport const AddTransaction = () => {\n  //update all the states\n  const [category,setCategory]=useState('');\n  const [amount, setAmount] = useState(0);\n  const [type,setType] = useState('');\n  const [date,setDate] = useState();\n  const [text, setText] = useState('');\n\n  const { updateTransactions } = useContext(GlobalContext);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const newTransaction = {\n      category:category,\n      amount:+amount,\n      type:type,\n      date:date,\n      text:text\n    }\n    addTransaction(newTransaction)\n    .then((result) => {\n      console.log(result)\n      updateTransactions(result)  \n      setCategory(\"\");\n      setAmount(0);\n      setDate('');\n      setType('');\n      setText('');\n    }).catch((err) => {\n      console.log(err)     \n    });\n    ;\n  }\n\n  const selectedCategories = type === 'Income' ? incomeCategories : expenseCategories;\n  return (\n   <div className=\"newTransaction\">\n      <h3>Add new transaction</h3>\n      <form>\n       <div className=\"form-control\">\n         <label htmlFor=\"text\">Income/Expense:</label><br/>\n          <select value={type} onChange={(e) => setType(e.target.value)}>\n            <option value=\"Income\">Income</option>\n            <option value=\"Expense\">Expense</option>\n        </select>\n        </div>  \n      <div className=\"form-control\">\n          <label htmlFor=\"category\">Category: </label><br/>\n          <select value={category} onChange={(e) => setCategory(e.target.value)}>\n            {selectedCategories.map((c) => <option key={c.type} value={c.type}>{c.type}</option>)}\n          </select>\n       </div>\n       <div className=\"form-control\">\n         <label htmlFor=\"amount\">Amount:</label><br/>\n         <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)}  />\n       </div>\n       <div className=\"form-control\">\n         <label htmlFor=\"Date\">Date:</label><br/>\n         <input type=\"date\" value={date} onChange={(e) => setDate(e.target.value )} />\n       </div>\n      <div className=\"form-control\">\n         <label htmlFor=\"remark\">Remark:</label><br/>\n         <textarea type='text' value={text} onChange={(e) => setText(e.target.value)} />\n     </div>\n        <button className=\"btn\"  onClick={onSubmit} >Add transaction</button>\n    </form>\n  </div>\n  )\n}\n","const messages = {\n  DEFAULT: 'Oh no!  Something went wrong, please try again',\n  USERNAME_REQUIRED: 'Username is required',\n  NETWORK_ERROR: 'There was a problem reaching your network, please try again',\n  LOGIN_REQUIRED: 'You must be logged in to view this content',\n  LOGIN_UNAUTHORIZED: 'You are not permitted to view this content',\n  BAD_USERNAME: 'Please choose a different username'\n};\n\nexport default messages;\n","import React, { useState, useContext } from 'react';\nimport { fetchLogin } from '../services/services';\nimport messages from '../services/messages';\nimport spinner from '../services/spinner.svg';\n\n//This function is to provide login interface\nconst Login = ({onLogIn}) => {\n // This state is all local to the component\n  const [username, setUsername] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const performLogin = () => {\n    if(!username) {\n      setError(messages.USERNAME_REQUIRED);\n      return;\n    }\n\n   //validate user's name\n    if(username==='dog'){\n      setError(messages.BAD_USERNAME)\n      return;\n    }\n    setError('');\n    setIsLoading(true);\n    fetchLogin(username)\n    .then( (userInfo) => {\n      console.log(userInfo)\n      onLogIn(userInfo.username)\n      setIsLoading(false); \n    })\n    .catch( (err) => {\n      setError(messages[err.code || 'DEFAULT']);\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <div className=\"login\">\n      <input className=\"username\" onChange={ (e) => setUsername(e.target.value)  } placeholder=\"Enter your username\"/>\n      <p className=\"error\">{error}</p>\n      { isLoading ?\n          <img alt=\"spinner\" src={spinner}/> :\n          <button className = \"loginbtn\" onClick={ performLogin }>Login</button>\n      }\n    </div>\n  );\n\n};\n\nexport default Login;\n","import React from \"react\";\nimport { fetchLogout } from \"../services/services\";\n\n//This function is to provide a logout function\nexport const Logout = ({ username, onLogout }) => {\n  function performLogOut() {\n    fetchLogout()\n      .then(() => {\n        onLogout();\n      })\n      .catch(() => console.log(\"fail to sign out\"));\n  }\n  return (\n    <div className=\"Logout\">\n      <button className='loginbtn' onClick={performLogOut}>Sign Out</button>\n    </div>\n  );\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\n\n//I use the material-ui to make a chart not to optimize the UI\nexport default makeStyles(() => ({\n  income: {\n    borderBottom: '10px solid rgba(0, 255, 0, 0.5)',\n  },\n  expense: {\n    borderBottom: '10px solid rgba(255, 0, 0, 0.5)',\n  },\n}));\n","import { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport { incomeCategories, expenseCategories, resetCategories } from '../constants/categories';\n\n//Compute each category for the chart\nconst useTransactions = (title) => {\n  resetCategories();\n  const { transactions } = useContext(GlobalContext);\n  const rightTransactions = transactions.filter((t) => t.type === title);\n  const total = rightTransactions.reduce((acc, currVal) => acc += +currVal.amount, 0);\n  const categories = title === 'Income' ? incomeCategories : expenseCategories;\n\n  rightTransactions.forEach((t) => {\n    const category = categories.find((c) => c.type === t.category);\n    if (category) category.amount += +t.amount;\n  });\n\n  const filteredCategories = categories.filter((sc) => sc.amount > 0);\n  const chartData = {\n    datasets: [{\n      data: filteredCategories.map((c) => c.amount),\n      backgroundColor: filteredCategories.map((c) => c.color),\n    }],\n    labels: filteredCategories.map((c) => c.type),\n  };\n  return { filteredCategories, total, chartData };\n};\n\nexport default useTransactions;\n","import React from 'react';\nimport { Card, CardHeader, CardContent, Typography } from '@material-ui/core';\nimport { Doughnut } from 'react-chartjs-2';\nimport \"./style/style.css\";\nimport useStyles from './style/styles';\nimport useTransactions from '../services/useTransactions';\n\n//This function is to provide a dynamic chart \nexport const DetailsCard = ({ title, subheader }) => {\n  const { total, chartData } = useTransactions(title);\n  const classes = useStyles();\n\n  return (\n    <div className=\"card\">\n    <Card className={title === 'Income' ? classes.income : classes.expense}>\n      <CardHeader title={title} subheader={subheader} />\n      <CardContent>\n        <Typography variant=\"h5\">${total}</Typography>\n        <Doughnut data={chartData} />\n      </CardContent>\n    </Card>\n    </div>\n  );\n};\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Header } from \"./components/Header.jsx\";\nimport { IncomeExpenses } from \"./components/IncomeExpenses.jsx\";\nimport { TransactionList } from \"./components/TransactionList.jsx\";\nimport { AddTransaction } from \"./components/AddTransaction.jsx\";\nimport Login from \"./components/Login.jsx\";\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport {Logout} from \"./components/Logout.jsx\"\nimport {DetailsCard} from './components/Details.jsx';\nimport { fetchLoginStatus,fetchLogout } from \"./services/services\";\nimport \"./App.css\";\n\n//The main page\nfunction App() {\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [username, setUserName] = useState(\"\");\n\n  useEffect(() => {\n    fetchLoginStatus().then(() => {\n      setLoggedIn(true);\n    });\n  }, []);\n\n  function processLogIn(username) {\n    setLoggedIn(true);\n    setUserName(username)\n  }\n  function processLogOut(){\n    setLoggedIn(false)\n    setUserName(\"\")\n  }\n\n  return (\n    <GlobalProvider>\n      {!isLoggedIn ? (\n        <Login onLogIn={processLogIn} />\n      ) : (\n        <>\n        <Header/>\n          <Logout username={username} onLogout={processLogOut}/>\n          <IncomeExpenses />\n          <div className=\"container\">\n            <DetailsCard  title=\"Income\" />\n            <DetailsCard  title=\"Expense\" />\n            <TransactionList />\n            <AddTransaction/>\n          </div> \n        </>\n      )}\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/spinner.05360875.svg\";"],"sourceRoot":""}